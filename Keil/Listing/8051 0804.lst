A51 MACRO ASSEMBLER  8051_0804                                                            04/14/2025 21:19:44 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\8051 0804.obj
ASSEMBLER INVOKED BY: D:\Programs\Windows\Install_dir\KeilC51\C51\BIN\A51.EXE 8051 0804.a51 SET(SMALL) DEBUG PRINT(.\Lis
                      tings\8051 0804.lst) OBJECT(.\Objects\8051 0804.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;===================================================================
                       2     ; R0 -> QUOTIENT STORAGE (50H TO 52H)
                       3     ; R1 -> REMAINDER STORAGE (60H TO 64H) 
                       4     ; R2 -> USED AS TEMP STORAGE OF SWAPPED REMAINDER FOR OR OPERATION
                       5     ; R3 -> USED FOR LOOP COUNTER
                       6     ; R4 -> STORAGE FOR HIGHER BYTE
                       7     ; R5 -> STORAGE FOR LOWER BYTE
                       8     
                       9     ; ASCII_LCD =======================
                      10     ; R0 -> USED FOR GETTING VALUES FROM 64H TO 60H 
                      11     ; R7 -> USED FOR LOOP COUNTER
                      12     
                      13     ; DELAY ==========================
                      14     ; R3 & R4 USED FOR LOOP COUNTER 
                      15     
0000                  16     ORG 0H
0000 020100           17     LJMP START      
                      18     
0100                  19     ORG 100H
0100                  20     START:
                      21     
                      22     ;-------------------------------------
                      23     ;LCD INITIALIZATION ------------------
                      24     ;-------------------------------------
                      25     
0100 7438             26         MOV A, #38H   ; Initialize LCD for 2 lines, 5x7 matrix
0102 1201E7           27         LCALL COMNWRT
0105 740C             28         MOV A, #0CH   ; Display ON, Cursor OFF, Blink OFF
0107 1201E7           29         LCALL COMNWRT
010A 7401             30         MOV A, #01H   ; Clear LCD display
010C 1201E7           31         LCALL COMNWRT
010F 7406             32             MOV A, #06H   ; Shift cursor to the right
0111 1201E7           33         LCALL COMNWRT
0114 7482             34         MOV A, #82H   ; Set cursor at Line 1, Column 1 (Corrected)
0116 1201E7           35         LCALL COMNWRT        ; Call command write subroutine
0119 7454             36         MOV A, #'T'          ; Display letter 'T'
011B 1201F6           37         LCALL DATAWRT        ; Call data write subroutine
011E 7445             38         MOV A, #'E'          ; Display letter 'E'
0120 1201F6           39         LCALL DATAWRT        ; Call data write subroutine
0123 744D             40         MOV A, #'M'          ; Display letter 'M'
0125 1201F6           41         LCALL DATAWRT        ; Call data write subroutine
0128 7450             42         MOV A, #'P'          ; Display letter 'P'
012A 1201F6           43         LCALL DATAWRT        ; Call data write subroutine
012D 7445             44         MOV A, #'E'          ; Display letter 'E'
012F 1201F6           45         LCALL DATAWRT        ; Call data write subroutine
0132 7452             46         MOV A, #'R'          ; Display letter 'R'
0134 1201F6           47         LCALL DATAWRT        ; Call data write subroutine
0137 7441             48         MOV A, #'A'          ; Display letter 'A'
0139 1201F6           49         LCALL DATAWRT        ; Call data write subroutine
013C 7454             50         MOV A, #'T'          ; Display letter 'T'
013E 1201F6           51         LCALL DATAWRT        ; Call data write subroutine
0141 7455             52         MOV A, #'U'          ; Display letter 'U'
0143 1201F6           53         LCALL DATAWRT        ; Call data write subroutine
0146 7452             54         MOV A, #'R'          ; Display letter 'R'
0148 1201F6           55         LCALL DATAWRT        ; Call data write subroutine
014B 7445             56         MOV A, #'E'          ; Display letter 'E'
014D 1201F6           57         LCALL DATAWRT        ; Call data write subroutine
A51 MACRO ASSEMBLER  8051_0804                                                            04/14/2025 21:19:44 PAGE     2

0150 743A             58         MOV A, #':'          ; Display colon ':'
0152 1201F6           59         LCALL DATAWRT        ; Call data write subroutine
                      60             
0155 74CA             61         MOV A, #0CAH         ; Set cursor at line 2, position 1
0157 1201E7           62         LCALL COMNWRT        ; Call command write subroutine
015A 74DF             63         MOV A,#0DFH          ; Degree Symbol
015C 1201F6           64         LCALL DATAWRT
015F 7443             65         MOV A,#'C'                  
0161 1201F6           66         LCALL DATAWRT
                      67     
                      68     ;================================================================
                      69     
                      70        ; LABELS FOR PINS OF ADC 0804
                      71           
  00B0                72             CS BIT P3.0
  00B1                73             RD_PIN BIT P3.1
  00B2                74             WR_PIN BIT P3.2
  00B3                75             INTR BIT P3.3
  0090                76             OUTPUT EQU P1
                      77             
0164 7590FF           78             MOV OUTPUT, #0FFH ; Configure P1 as input
                      79             
0167                  80     LOOP:
                      81             
0167 74C4             82             MOV A, #0C4H         ; Set cursor at line 2, position 1
0169 1201E7           83             LCALL COMNWRT        ; Call command write subroutine
                      84             
                      85             ;---- ADC 0804 ---------------------------------------
                      86             
016C C2B0             87              CLR CS                 ; Select ADC (Active Low)
016E C2B2             88              CLR WR_PIN             ; WR = 0 (Start conversion)
0170 D2B2             89              SETB WR_PIN            ; WR = 1 (End write - Start conversion)
0172 D2B0             90              SETB CS
                      91          
0174 20B3FD           92              JB INTR, $     ; Wait for conversion to complete (INTR = 0 means busy)
                      93     
                      94               ;Once INTR is high, conversion is done
0177 C2B0             95              CLR CS                 ; Keep CS low during read (select ADC)
0179 C2B1             96              CLR RD_PIN             ; RD = 0 (Initiate ADC read)
017B E590             97              MOV A, OUTPUT          ; Store ADC data in Accumulator (A)
017D F580             98              MOV P0, A              ; CHECK OUTPUT AT PORT 0 FOR DEBUGGING
017F D2B1             99              SETB RD_PIN            
0181 D2B0            100              SETB CS                ; Deselect ADC (CS = 1)
                     101     
                     102             ;-----------------------------------------------------
                     103                     ;MOV A, #0AEH;
                     104                       
0183 75F03D          105                     MOV B, #61; CONST 61 LM35 (1.59/255)
0186 A4              106                     MUL AB; MULTIPLY CONST AND O/P OF PORT1
0187 ACF0            107                     MOV R4, B; MOVE HIGHER BYTE TO R4
0189 FD              108                     MOV R5, A; MOVE LOWER BYTE TO R5
                     109                     
018A 7850            110                     MOV R0, #50H; QUOTIENT STORAGE
018C 7960            111                     MOV R1,#60H; REMAINDER STORAGE
                     112                     
                     113             ;------------------------------------------------------
                     114             
018E                 115                     DIV_LOOP:
018E 31B1            116                             ACALL DIVV; CALL THE DIV SUBROUTINE AT LINE 39
0190 AC50            117                             MOV R4, 50H; MOVE THE FIRST QUOTIENT TO R4
0192 E551            118                             MOV A, 51H; MOVE THE SECOND QUOTIENT TO A
0194 C4              119                             SWAP A; SWAP THE BITS OF ACC EX- 1000 0010 = 0010 1000
0195 4552            120                             ORL A, 52H; OR OPERATION FOR ADDING THE PAST REMAINDER WITH NEW DIV
                             IDEND 
0197 FD              121                             MOV R5, A; MOVE THE NEW DIVIDEND TO LOWER BYTE (ALSO THE FINAL QUOT
                             IENT)
A51 MACRO ASSEMBLER  8051_0804                                                            04/14/2025 21:19:44 PAGE     3

0198 7850            122                             MOV R0, #50H; RESET THE R0 REGISTER FOR STORING THE QUOTIENT OF NEX
                             T NUMBERS
019A 09              123                             INC R1; increment for storing all the remainders
019B F7              124                             MOV @R1, A; SAVE THE QUOTIENT 
019C EC              125                             MOV A, R4; MOVE THE FIRST QUOTIENT TO ACC FOR CHECKING 
019D 70EF            126                             JNZ DIV_LOOP ; IF THE ACC IN NOT ZERO THEN CONTINUE LOOP ELSE NEXT 
                             LINE
019F ED              127                             MOV A, R5; final quotient
01A0 C3              128                             CLR C; CLEAR THE CARRY FLAG FOR SUBB
01A1 940A            129                             SUBB A,#0AH; CHECK IF THE QUOTIENT IS LESS THAN 0AH TO SEE IF ITS D
                             ECIMAL OR NOT
01A3 50E9            130                             JNC DIV_LOOP; IF CARRY IS NOT SET , THEN CONTINUE DIVISION , IF CAR
                             RY IS SET THE FINAL QUOTIENT IS DECIMAL                      
                     131                             
01A5 31D1            132                     ACALL ASCII_LCD; CALL THE ASCII SUBROUTINE TO CONVERT DECIMAL INTO ASCII AN
                             D PRINT IN LCD
                     133                     
                     134                     ; CLEAR THE 64H AND 63H MEMORY LOCATION TO CLEAR THE MEMORY IF THE NEXT NUM
                             BER DOES NOT OVERWRITE -
                     135                     ; - THE DATA OF THE MEMORY LOCATION THEN THE PAST DATA WILL BE THERE AND TH
                             E TEMPERATURE WONT BE CORRECLTY DISPLAYED
01A7 756400          136                     MOV 64H, #00H
01AA 756300          137                     MOV 63H, #00H
                     138                     
01AD 510E            139                     ACALL DELAY_3_SEC
                     140     
01AF 80B6            141     SJMP LOOP ; CONTINUE THE LOOP FOREVER
                     142                     
                     143     ;------------------------------------------------------------------------------------------
                             -------------------
                     144     
                     145     
                     146     ;-------------------------------
                     147     ; DIVISION SUBROUTINE
                     148     ;-------------------------------
                     149     
01B1                 150                     DIVV:
01B1 EC              151                             MOV A, R4; MOVE HIGHER BYTE TO ACC FOR FIRST DIV
01B2 75F00A          152                             MOV B, #0AH; MOVE 10 TO B
01B5 7B03            153                             MOV R3, #3; LOOP COUNTER FOR DIVISIONS
01B7                 154                             JUUMP: 
01B7 84              155                                     DIV AB; DIV A WITH 0x0A
01B8 F6              156                                     MOV @R0, A; SAVE QUOTIENT FROM 0x50
01B9 08              157                                     INC R0; INCREMENT FOR THE NEXT QUOTIENT
01BA A7F0            158                                     MOV @R1, B; SAVE THE REMAINDER FROM 0x60
01BC E7              159                                     MOV A, @R1; MOVE THE REMAINDER TO A FOR SWAPPING THE BITS
01BD C4              160                                     SWAP A; SWAP THE BITS OF ACC EX- 1000 0010 = 0010 1000
01BE FA              161                                     MOV R2, A; SAVE THE BYTE TO R2 FOR FURTHER OPERATION
01BF ED              162                                     MOV A, R5; MOVE THE LOWER BYTE FOR DIVISION
01C0 75F010          163                                     MOV B,#10H 
01C3 84              164                                     DIV AB; DIVIDE THE NUM WITH 10H
                     165             
01C4 BB0202          166                                     CJNE R3, #2, SKIP
01C7 E5F0            167                                     MOV A, B
                     168             
01C9                 169                                     SKIP:
01C9 4A              170                                             ORL A,R2; ORL OPERATION TO ADD 
01CA 75F00A          171                                             MOV B, #0AH; MOVE 0AH FOR NEXT DIVISION
01CD C3              172                                             CLR C; CLEAR THE CARRY FLAG
01CE DBE7            173                             DJNZ R3, JUUMP; KEEP THE LOOP FOR 3 ITERATIONS
01D0 22              174                     RET
                     175                     
                     176     ;======================================
                     177     ; ASCII SUBROUTINE
                     178     ;=======================================
                     179                     
A51 MACRO ASSEMBLER  8051_0804                                                            04/14/2025 21:19:44 PAGE     4

01D1                 180     ASCII_LCD:
01D1 7864            181        MOV R0, #64H                 
01D3 7F05            182        MOV R7, #5
                     183                             
01D5                 184        JUMP_ASCII:  
01D5 E6              185           MOV A, @R0
01D6 2430            186           ADD A, #30H
01D8 1201F6          187           LCALL DATAWRT        ; Call data write subroutine
01DB 18              188           DEC R0
01DC BF0305          189           CJNE R7, #3, JMPP
01DF 742E            190           MOV A,#"."
01E1 1201F6          191           LCALL DATAWRT
01E4 DFEF            192           JMPP:DJNZ R7, JUMP_ASCII
01E6 22              193     RET     
                     194     
                     195     ; ==============================
                     196     ; Command Write Subroutine
                     197     ; ============================
01E7                 198     COMNWRT:
01E7 F5A0            199         MOV P2, A            ; Copy content of register A to port 1
01E9 C2B4            200         CLR P3.4             ; Set RS = 0 for command mode
01EB C2B5            201         CLR P3.5             ; Set R/W = 0 for write mode
01ED D2B6            202         SETB P3.6            ; Set E high for pulse
01EF 5105            203             ACALL DELAY          ; Prepare for sending command to LCD
01F1 C2B6            204         CLR P3.6             ; Set E low for H-to-L pulse
01F3 5105            205         ACALL DELAY          ; Prepare for sending command to LCD
01F5 22              206             RET
                     207     
                     208     ; =============================
                     209     ; Data Write Subroutine
                     210     ; =============================
01F6                 211     DATAWRT:
01F6 F5A0            212         MOV P2, A            ; Copy content of register A to port 2
01F8 D2B4            213         SETB P3.4            ; Set RS = 1 for data mode
01FA C2B5            214         CLR P3.5             ; Set R/W = 0 for write mode
01FC D2B6            215         SETB P3.6            ; Set E high for pulse
01FE 5105            216             ACALL DELAY          ; Prepare for sending command to LCD
0200 C2B6            217         CLR P3.6             ; Set E low for H-to-L pulse
0202 5105            218         ACALL DELAY          ; Prepare for sending command to LCD
0204 22              219         RET
                     220     
                     221     
                     222     ; =============================
                     223     ; Delay Subroutine
                     224     ; =============================
0205                 225     DELAY:
0205 7B0A            226         MOV R3, #10          ; Set outer loop count (50 or higher for fast CPUs)
0207                 227     HERE2:
0207 7C1E            228         MOV R4, #30         ; Set inner loop count (255)
0209                 229     HERE:
0209 DCFE            230         DJNZ R4, HERE        ; Decrement R4 and repeat until it reaches 0
020B DBFA            231         DJNZ R3, HERE2       ; Decrement R3 and repeat until it reaches 0
020D 22              232             RET
                     233             
020E                 234     DELAY_3_SEC:
020E 7D14            235         MOV R5, #20    
0210                 236     D3:
0210 7CFA            237         MOV R4, #250   
0212                 238     D2:
0212 7BFA            239         MOV R3, #250   
0214                 240     D1:
0214 DBFE            241         DJNZ R3, D1
0216 DCFA            242         DJNZ R4, D2
0218 DDF6            243         DJNZ R5, D3
021A 22              244         RET
                     245     
A51 MACRO ASSEMBLER  8051_0804                                                            04/14/2025 21:19:44 PAGE     5

                     246     
                     247     END
                             
A51 MACRO ASSEMBLER  8051_0804                                                            04/14/2025 21:19:44 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

ASCII_LCD. . . . .  C ADDR   01D1H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
COMNWRT. . . . . .  C ADDR   01E7H   A   
CS . . . . . . . .  B ADDR   00B0H.0 A   
D1 . . . . . . . .  C ADDR   0214H   A   
D2 . . . . . . . .  C ADDR   0212H   A   
D3 . . . . . . . .  C ADDR   0210H   A   
DATAWRT. . . . . .  C ADDR   01F6H   A   
DELAY. . . . . . .  C ADDR   0205H   A   
DELAY_3_SEC. . . .  C ADDR   020EH   A   
DIVV . . . . . . .  C ADDR   01B1H   A   
DIV_LOOP . . . . .  C ADDR   018EH   A   
HERE . . . . . . .  C ADDR   0209H   A   
HERE2. . . . . . .  C ADDR   0207H   A   
INTR . . . . . . .  B ADDR   00B0H.3 A   
JMPP . . . . . . .  C ADDR   01E4H   A   
JUMP_ASCII . . . .  C ADDR   01D5H   A   
JUUMP. . . . . . .  C ADDR   01B7H   A   
LOOP . . . . . . .  C ADDR   0167H   A   
OUTPUT . . . . . .  D ADDR   0090H   A   
P0 . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
RD_PIN . . . . . .  B ADDR   00B0H.1 A   
SKIP . . . . . . .  C ADDR   01C9H   A   
START. . . . . . .  C ADDR   0100H   A   
WR_PIN . . . . . .  B ADDR   00B0H.2 A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
